install.packages(c("lubridate", "readtext", "tidytext", "tidyverse"))
library(tidyverse)
library(tidytext)
library(readtext)
library(lubridate)
mydir <- "~/Projects/AIM2019/"
source(str_glue("{mydir}support.R"))
setwd(mydir)
## Set your directory
mydir <- "/disk2a/dgarolini/eron_EY/aim-2019"
source(str_glue("{mydir}support.R"))
## Set your directory
mydir <- "/disk2a/dgarolini/eron_EY/aim-2019/"
source(str_glue("{mydir}support.R"))
setwd(mydir)
dirs <- list.dirs("./maildir", full.names = T, recursive = T) %>%
str_subset("/sent$")
dirs <- list.dirs("../enron_mail_20150507/", full.names = T, recursive = T) %>%
str_subset("/sent$")
dirs
c.c(dirs)
meta <- map_dfr(c.c(dirs), function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory") %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>%
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>%
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) %>%
mutate(features = map(text, extract_meta)) %>%
unnest(features)
## Set your directory
mydir <- "/disk2a/dgarolini/eron_EY/aim-2019/"
source(str_glue("../{mydir}support.R"))
## Set your directory
mydir <- "/disk2a/dgarolini/eron_EY/aim-2019/"
## Set your directory
mydir <- "/disk2a/dgarolini/eron_EY/aim-2019/dgar/"
source(str_glue("../{mydir}support.R"))
source(str_glue("{mydir}/../support.R"))
setwd(mydir)
dirs <- list.dirs("../enron_mail_20150507/", full.names = T, recursive = T) %>%
str_subset("/sent$")
dirs <- list.dirs("../enron_mail_20150507/", full.names = T, recursive = T) %>%
str_subset("/sent$")
meta <- map_dfr(c.c(dirs), function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory") %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>%
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>%
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) %>%
mutate(features = map(text, extract_meta)) %>%
unnest(features)
map_dfr(c.c(dirs), function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
c.c(dirs)
dirs
dirs <- list.dirs("../../enron_mail_20150507/", full.names = T, recursive = T) %>%
str_subset("/sent$")
meta <- map_dfr(c.c(dirs), function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory") %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>%
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>%
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) %>%
mutate(features = map(text, extract_meta)) %>%
unnest(features)
dirs
c.c(dirs)
meta <- map_dfr(c.c(dirs)[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta
meta <- map_dfr(dirs[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta
readtext(dirs[1], verbosity = 0)
meta <- map_dfr(dirs[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "dirs")
meta
meta <- map_dfr(c.c(dirs)[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta <- meta %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/"))
meta
meta <- map_dfr(c.c(dirs)[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta <- meta %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>% # removing the maildir from directory columns
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge")
meta
meta <- map_dfr(c.c(dirs)[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta <- meta %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>% # removing the maildir from directory columns
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>% # splitting the the directory columns into who and directory and merging
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) #%>%
meta
mtcars
as.tibble(mtcars)
trial <-  as.tibble(mtcars)
(trial <- as.tibble(mtcars))
trial %>% mutate()
starwars
starwars %>% mutate(mass/mean(mass, na.rm = T))
starwars %>% mutate(mass/mean(mass, na.rm = T)) %>% pull()
(trial <- as.tibble(mtcars))
trial %>% mutate(seq=map(cyl, seq))
trial %>% mutate(seq=map(cyl, seq))  %>% pull()
scale2 <- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm)
starwars %>% mutate_at(c("height", "mass"), scale2)
starwars %>% mutate_at(c("height", "mass"), scale2, na.rm = TRUE)
meta <- map_dfr(c.c(dirs)[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta <- meta %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>% # removing the maildir from directory columns
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>% # splitting the the directory columns into who and directory and merging
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) #%>%
meta
meta <- meta %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>% # removing the maildir from directory columns
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>% # splitting the the directory columns into who and directory and merging
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) %>%
mutate(features = map(text, extract_meta)) %>%
unnest(features)
readtext(x, verbosity = 0)
meta <- map_dfr(c.c(dirs)[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta <- meta %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>% # removing the maildir from directory columns
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>% # splitting the the directory columns into who and directory and merging
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) %>%
mutate(features = map(text, extract_meta)) %>%
unnest(features)
features
meta <- map_dfr(c.c(dirs)[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta <- meta %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>% # removing the maildir from directory columns
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>% # splitting the the directory columns into who and directory and merging
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) #%>%
meta %>% mutate(features = map(text, extract_meta)) %>%
unnest(features)
select(meta, text)[1]
select(meta, text)[[1]]
corpus <- meta %>%
mutate(features = map(text, extract_body)) %>%
unnest(features) %>%
filter(map_lgl(body, ~ str_squish(.x) %>% str_detect("[:alpha:]") %>% any())) %>% ## Remove empty bodies
select(-text) %>%
separate(Date, into = c("Weekday", "DateLocal", "Timezone"), sep = "(, | -)") %>%
mutate_at("Timezone", ~ str_extract(., "(?<=\\()[:alpha:]+(?=\\))")) %>%
mutate_at("DateLocal", dmy_hms) %>%
mutate(DateUTC = map2(DateLocal, Timezone, function(x, y) {
tz(x) <- y
return(x)
})) %>%
unnest(DateUTC) %>%
mutate_at(c("To", "Cc", "Bcc"), ~ map(., function(x) {
x <- str_split(x, pattern = "( |,)+")[[1]] %>%
str_subset("@")
grep("(<|>)", x, value = T, invert= T)
}))
select(meta, text)
select(meta, text, 1)
select(meta, text)[[1]][[1]]
meta <- meta %>% mutate(features = map(text, extract_meta)) %>%
unnest(features)
select(meta, text)[[1]][[1]]
extract_meta(select(meta, text)[[1]][[1]])
meta <- map_dfr(c.c(dirs)[1:3], function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta <- meta %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>% # removing the maildir from directory columns
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>% # splitting the the directory columns into who and directory and merging
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) #%>%
meta <- meta %>% mutate(features = map(text, extract_meta)) %>%
unnest(features)
corpus <- meta %>%
mutate(features = map(text, extract_body)) %>%
unnest(features) %>%
filter(map_lgl(body, ~ str_squish(.x) %>% str_detect("[:alpha:]") %>% any())) %>% ## Remove empty bodies
select(-text) %>%
separate(Date, into = c("Weekday", "DateLocal", "Timezone"), sep = "(, | -)") %>%
mutate_at("Timezone", ~ str_extract(., "(?<=\\()[:alpha:]+(?=\\))")) %>%
mutate_at("DateLocal", dmy_hms) %>%
mutate(DateUTC = map2(DateLocal, Timezone, function(x, y) {
tz(x) <- y
return(x)
})) %>%
unnest(DateUTC) %>%
mutate_at(c("To", "Cc", "Bcc"), ~ map(., function(x) {
x <- str_split(x, pattern = "( |,)+")[[1]] %>%
str_subset("@")
grep("(<|>)", x, value = T, invert= T)
}))
corpus
meta <- map_dfr(c.c(dirs), function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory")
meta <- map_dfr(c.c(dirs), function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory") %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>% # removing the maildir from directory columns
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>% # splitting the the directory columns into who and directory and merging
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) #%>%
meta <- map_dfr(c.c(dirs), function(x) {
cat(x, "\n")
readtext(x, verbosity = 0)
}, .id = "directory") %>%
as_tibble() %>%
mutate_at("directory", ~ str_remove(., ".*maildir/")) %>% # removing the maildir from directory columns
separate("directory", into = c("who", "directory"), sep = "/", extra = "merge") %>% # splitting the the directory columns into who and directory and merging
mutate_at("text", map, ~ str_split(.x, "\n")[[1]]) %>%
mutate(features = map(text, extract_meta)) %>%
unnest(features)
library(tidyverse)
library(tidytext)
library(readtext)
library(lubridate)
library(reshape2)
## Set your directory
mydir <- "/disk2a/dgarolini/eron_EY/aim-2019/dgar/"
source(str_glue("{mydir}/../support.R"))
setwd(mydir)
# NETWORK ----------------------------------------------
corpus <- readRDS(str_glue("{mydir}../mail_corpus.RData"))
# name identifiers
who <- corpus %>% select(who) %>% map(unique); who <- who[[1]]
find_candidate_replicates(who)
tile_plot_mat <- function(mat, label = NULL, titleit = NULL, annot = NULL, vlines = NULL, diag = T, col = "Oranges", col_ann = "Blues", return_plot = F, plot = T){
mat <- as.matrix(mat)
dimnames(mat) <- NULL
if(!is.null(annot)) {
annot <- annot[1:nrow(mat)]
df_seg <- data.frame("xs" = 1:nrow(mat), "xsend" = 1:nrow(mat), "ys" = rep(-1, nrow(mat)), "ysend" = rep(0, nrow(mat)), "scol_res" = .factorOrnot(annot))
if(nrow(mat) == ncol(mat)) {
df_seg <- data.frame("xs" = 1:nrow(mat), "xsend" = 1:nrow(mat), "ys" = rep(-1, nrow(mat)), "ysend" = rep(0, nrow(mat)), "scol_res" = .factorOrnot(sort(annot)))
mat <- mat[order(annot), order(annot)]
}
}
if(!diag) diag(mat) <- NA
melted_mat1 <- reshape2::melt(data = as.matrix(mat), value.name = "lab")
gg_tile <- ggplot(data = melted_mat1, aes(x = Var1, y = Var2, fill = lab)) + theme_minimal() + theme(panel.grid = element_blank()) + geom_tile() +
scale_fill_distiller(palette = col) + xlab("") + ylab("") + scale_y_continuous(breaks = scales::pretty_breaks()) + scale_x_continuous(breaks = scales::pretty_breaks())
if(!is.null(vlines)){
gg_tile <- gg_tile + geom_vline(xintercept = vlines, size = 0.5, col = "black")
}
if(is.null(label)){
gg_tile <- gg_tile + theme(legend.position = "none")
}else{
gg_tile <- gg_tile + labs(fill = label)
}
if(!is.null(annot)){
gg_tile <- gg_tile + theme(legend.position = "none")
cl_pl_res <- ggplot() + geom_rect(data = df_seg, mapping = aes(xmin = xs, ymin = ys, xmax = xsend + 1, ymax = ysend, fill = scol_res)) + theme_minimal() +
theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.line = element_blank(),
legend.position = "none", plot.margin = unit(c(0,0,-0.25,0), "cm"), panel.grid = element_blank()) + .palettit(.ltuni(df_seg$scol_res) < 8, col_ann, type = "fill")
if(!is.null(titleit)) cl_pl_res <- cl_pl_res + ggtitle(titleit)
gg_tile <- cowplot::plot_grid(cl_pl_res, gg_tile, align = "v", ncol = 1, rel_heights = c(0.2, 1))
}else{
if(!is.null(titleit)) gg_tile <- gg_tile + ggtitle(titleit)
}
if(plot) print(gg_tile)
if(return_plot) invisible(gg_tile)
}
# the distance is a generalized Levenshtein (edit) distance, giving the minimal possibly weighted number of insertions, deletions and substitutions needed to transform one string into another.
# It is at most the length of the longer string. -> Normalization
find_candidate_replicates <- function(who, plot_tile_pl = T){
dist_mat <- adist(who, who)
lev_sim_names <- sapply(1:nrow(dist_mat), function(y) dist_mat[y,] / sapply(who, function(x) max(nchar(x), nchar(who[y]))))
diag(lev_sim_names) <- NA
if(plot_tile_pl) hist(lev_sim_names)
if(plot_tile_pl) tile_plot_mat(lev_sim_names, label = "Char Dist")
cat("Quartiles:", quantile(lev_sim_names, probs = seq(0, 1, length.out = 5), na.rm = T), "\n")
cat("Value range:", range(lev_sim_names, na.rm = T), "\n")
colnames(lev_sim_names) <- who
lev_sim_names[upper.tri(lev_sim_names, diag = T)] <- NA
melted_lev_sim <- melt(lev_sim_names)
out_mat <- melted_lev_sim[order(melted_lev_sim$value, decreasing = F, na.last = T),]
print(head(out_mat))
invisible(out_mat)
}
# NETWORK ----------------------------------------------
corpus <- readRDS(str_glue("{mydir}../mail_corpus.RData"))
# name identifiers
who <- corpus %>% select(who) %>% map(unique); who <- who[[1]]
# email identifiers - to
email_to <- corpus %>% select(To) %>% map(unique); email_to <- email_to[[1]]
email_to
# email identifiers - from
email_from <- corpus %>% select(From) %>% map(unique); email_from <- email_from[[1]]
email_from
# email identifiers - to
email_to <- corpus %>% select(To) %>% map(unique)
email_to
corpus %>% select(To)
corpus
corpus %>% select(X-To)
corpus %>% select("X-To")
corpus %>% select("To")
corpus %>% select("To")
